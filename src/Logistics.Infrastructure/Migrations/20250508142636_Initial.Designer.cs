// <auto-generated />
using System;
using Logistics.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Logistics.Infrastructure.Migrations
{
    [DbContext(typeof(LogisticDbContext))]
    [Migration("20250508142636_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Addresses.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Street")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryScheduleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualLoadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EstimatedLoadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("DeliverySchedules");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryTrackingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("DeliveryTrackings");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.RouteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("LeadTime")
                        .HasColumnType("interval");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Notifications.LetterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HashCode")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId")
                        .IsUnique();

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Notifications.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HashCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId")
                        .IsUnique();

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderPromotionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.HasIndex("OrderId", "PromotionId")
                        .IsUnique();

                    b.ToTable("OrderPromotions");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Payments.PaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExternalReceiptId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Payments.RefundedPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExternalReceiptId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("RefundedPayments");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Products.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Promotions.PromotionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Users.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.DriverEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeliveryTrackingId")
                        .HasColumnType("integer");

                    b.Property<int?>("LoadCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("MileAge")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTrackingId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleMaintenanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleMaintenances");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Warehouses.InventoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Warehouses.WarehouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("Square")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Addresses.AddressEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Users.UserEntity", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryScheduleEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", "Order")
                        .WithOne()
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryScheduleEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryTrackingEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", "Vehicle")
                        .WithOne()
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryTrackingEntity", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Delivery.RouteEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Addresses.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Delivery.RouteEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", "Vehicle")
                        .WithOne("Route")
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Delivery.RouteEntity", "VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Notifications.LetterEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Notifications.NotificationEntity", "Notification")
                        .WithOne("Letter")
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Notifications.LetterEntity", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Notifications.NotificationEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Users.UserEntity", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Addresses.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Users.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderProductEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Products.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderPromotionEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", "Order")
                        .WithMany("OrderPromotions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Promotions.PromotionEntity", "Promotion")
                        .WithMany("OrderPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Payments.PaymentEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Payments.PaymentEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Logistics.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("PaymentEntityId")
                                .HasColumnType("integer");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Sum")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("PaymentAmount");

                            b1.HasKey("PaymentEntityId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentEntityId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Payments.RefundedPaymentEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Payments.PaymentEntity", "Payment")
                        .WithMany("CancelledPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("RefundedPaymentEntityId")
                                .HasColumnType("integer");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Sum")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("AmountSum");

                            b1.HasKey("RefundedPaymentEntityId");

                            b1.ToTable("RefundedPayments");

                            b1.WithOwner()
                                .HasForeignKey("RefundedPaymentEntityId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Products.ProductEntity", b =>
                {
                    b.OwnsOne("Logistics.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("ProductEntityId")
                                .HasColumnType("integer");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Sum")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("PriceAmount");

                            b1.HasKey("ProductEntityId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductEntityId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.DriverEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", "Vehicle")
                        .WithOne("Driver")
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Vehicles.DriverEntity", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Delivery.DeliveryTrackingEntity", "DeliveryTracking")
                        .WithMany()
                        .HasForeignKey("DeliveryTrackingId");

                    b.Navigation("DeliveryTracking");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleMaintenanceEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", "Vehicle")
                        .WithMany("VehicleMaintenance")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Logistics.Domain.ValueObjects.Money", "MaintenancePrice", b1 =>
                        {
                            b1.Property<int>("VehicleMaintenanceEntityId")
                                .HasColumnType("integer");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Sum")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("MaintenancePrice");

                            b1.HasKey("VehicleMaintenanceEntityId");

                            b1.ToTable("VehicleMaintenances");

                            b1.WithOwner()
                                .HasForeignKey("VehicleMaintenanceEntityId");
                        });

                    b.Navigation("MaintenancePrice");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Warehouses.InventoryEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Products.ProductEntity", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Warehouses.WarehouseEntity", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Warehouses.WarehouseEntity", b =>
                {
                    b.HasOne("Logistics.Infrastructure.DatabaseEntity.Addresses.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("Logistics.Infrastructure.DatabaseEntity.Warehouses.WarehouseEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Notifications.NotificationEntity", b =>
                {
                    b.Navigation("Letter");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Orders.OrderEntity", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderPromotions");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Payments.PaymentEntity", b =>
                {
                    b.Navigation("CancelledPayments");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Products.ProductEntity", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Promotions.PromotionEntity", b =>
                {
                    b.Navigation("OrderPromotions");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Users.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Vehicles.VehicleEntity", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("Orders");

                    b.Navigation("Route");

                    b.Navigation("VehicleMaintenance");
                });

            modelBuilder.Entity("Logistics.Infrastructure.DatabaseEntity.Warehouses.WarehouseEntity", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
